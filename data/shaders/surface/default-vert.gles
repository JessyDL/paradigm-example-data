#version 300 es

struct FrameData
{
    mat4 clipMatrix;
    mat4 projectionMatrix;
    mat4 modelMatrix;
    mat4 viewMatrix;
    mat4 WVP;
    mat4 VP;
    vec4 ScreenParams;
    vec4 GameTimer;
    vec4 Parameters;
    vec4 FogColor;
    vec4 viewPos;
    vec4 viewDir;
};

layout(std140) uniform GLOBAL_WORLD_VIEW_PROJECTION_MATRIX
{
    FrameData data[128];
} ubo;

struct pushConstants
{
    uint UBOIndex;
};

uniform pushConstants pConstant;

out vec4 outColor;
out vec2 outTex;
layout(location = 2) in vec2 intex;
out int outInstanceIndex;
uniform int SPIRV_Cross_BaseInstance;
layout(location = 4) in mat4 inmodelMat;
out vec3 outNormal;
layout(location = 3) in vec3 innormal;
out vec4 outWPos;
layout(location = 0) in vec3 inposition;
out vec4 outViewVec;
layout(location = 1) in vec3 incolor;

void main()
{
    outColor = vec4(0.0);
    outTex = intex;
    outInstanceIndex = (gl_InstanceID + SPIRV_Cross_BaseInstance);
    mat4 mNormal = ubo.data[pConstant.UBOIndex].modelMatrix * inmodelMat;
    outNormal = normalize((mNormal * vec4(normalize(innormal), 0.0)).xyz);
    vec3 _79 = ((ubo.data[pConstant.UBOIndex].modelMatrix * inmodelMat) * vec4(inposition, 1.0)).xyz;
    outWPos = vec4(_79.x, _79.y, _79.z, outWPos.w);
    gl_Position = ubo.data[pConstant.UBOIndex].WVP * vec4(outWPos.xyz, 1.0);
    vec3 _108 = ubo.data[pConstant.UBOIndex].viewPos.xyz - outWPos.xyz;
    outViewVec = vec4(_108.x, _108.y, _108.z, outViewVec.w);
    outViewVec.w = length(outViewVec.xyz);
    vec3 _119 = normalize(outViewVec.xyz);
    outViewVec = vec4(_119.x, _119.y, _119.z, outViewVec.w);
    outWPos.w = distance(outWPos.xyz, ubo.data[pConstant.UBOIndex].viewPos.xyz) / ubo.data[pConstant.UBOIndex].ScreenParams.w;
}


#version 300 es

struct FrameData
{
    mat4 clipMatrix;
    mat4 projectionMatrix;
    mat4 modelMatrix;
    mat4 viewMatrix;
    mat4 WVP;
    mat4 VP;
    vec4 ScreenParams;
    vec4 GameTimer;
    vec4 Parameters;
    vec4 FogColor;
    vec4 viewPos;
    vec4 viewDir;
};

layout(std140) uniform GLOBAL_DYNAMIC_WORLD_VIEW_PROJECTION_MATRIX
{
    FrameData data;
} ubo;

out vec4 vsCol;
out vec2 vsTex;
layout(location = 2) in vec2 iTex;
flat out int vsInstanceIndex;
uniform int SPIRV_Cross_BaseInstance;
layout(location = 4) in mat4 INSTANCE_TRANSFORM;
out vec3 vsNormal;
layout(location = 3) in vec3 iNorm;
out vec4 vsWPOS;
layout(location = 0) in vec3 iPos;
out vec4 vsViewVec;
layout(location = 1) in vec3 iCol;

void main()
{
    vsCol = vec4(0.0);
    vsTex = iTex;
    vsInstanceIndex = (gl_InstanceID + SPIRV_Cross_BaseInstance);
    mat4 mNormal = ubo.data.modelMatrix * INSTANCE_TRANSFORM;
    vsNormal = normalize((mNormal * vec4(normalize(iNorm), 0.0)).xyz);
    vec3 _68 = ((ubo.data.modelMatrix * INSTANCE_TRANSFORM) * vec4(iPos, 1.0)).xyz;
    vsWPOS = vec4(_68.x, _68.y, _68.z, vsWPOS.w);
    gl_Position = ubo.data.WVP * vec4(vsWPOS.xyz, 1.0);
    vec3 _93 = ubo.data.viewPos.xyz - vsWPOS.xyz;
    vsViewVec = vec4(_93.x, _93.y, _93.z, vsViewVec.w);
    vsViewVec.w = length(vsViewVec.xyz);
    vec3 _105 = normalize(vsViewVec.xyz);
    vsViewVec = vec4(_105.x, _105.y, _105.z, vsViewVec.w);
    vsWPOS.w = distance(vsWPOS.xyz, ubo.data.viewPos.xyz) / ubo.data.ScreenParams.w;
}

